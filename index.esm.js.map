{"version":3,"file":"index.esm.js","sources":["createDirectoryContents.js","index.js"],"sourcesContent":["import * as fs from 'fs';\r\nconst CURR_DIR = process.cwd();\r\n\r\nconst createDirectoryContents = (templatePath, newProjectPath) => {\r\n  const filesToCreate = fs.readdirSync(templatePath);\r\n\r\n  filesToCreate.forEach((file) => {\r\n    const origFilePath = `${templatePath}/${file}`;\r\n\r\n    // get stats about the current file\r\n    const stats = fs.statSync(origFilePath);\r\n\r\n    if (stats.isFile()) {\r\n      const contents = fs.readFileSync(origFilePath, 'utf8');\r\n\r\n      // Rename\r\n      if (file === '.npmignore') file = '.gitignore';\r\n\r\n      const writePath = `${CURR_DIR}/${newProjectPath}/${file}`;\r\n      fs.writeFileSync(writePath, contents, 'utf8');\r\n    } else if (stats.isDirectory()) {\r\n      fs.mkdirSync(`${CURR_DIR}/${newProjectPath}/${file}`);\r\n\r\n      // recursive call\r\n      createDirectoryContents(`${templatePath}/${file}`, `${newProjectPath}/${file}`);\r\n    }\r\n  });\r\n};\r\n\r\nexport default createDirectoryContents;\r\n","#!/usr/bin/env node\n\r\nimport inquirer from 'inquirer';\r\nimport * as fs from 'fs';\r\nimport { dirname } from 'path';\r\nimport { fileURLToPath } from 'url';\r\nimport createDirectoryContents from './createDirectoryContents.js';\r\nconst CURR_DIR = process.cwd();\r\nconst __dirname = dirname(fileURLToPath(import.meta.url));\r\n\r\nconst CHOICES = fs.readdirSync(`${__dirname}/templates`);\r\n\r\nconst QUESTIONS = [\r\n  {\r\n    name: 'project-choice',\r\n    type: 'list',\r\n    message: 'What project template would you like to generate?',\r\n    choices: CHOICES\r\n  },\r\n  {\r\n    name: 'project-name',\r\n    type: 'input',\r\n    message: 'Project name:',\r\n    validate: function (input) {\r\n      if (/^([A-Za-z\\-\\\\_\\d])+$/.test(input)) return true;\r\n      else return 'Project name may only include letters, numbers, underscores and hashes.';\r\n    }\r\n  }\r\n];\r\n\r\ninquirer.prompt(QUESTIONS).then((answers) => {\r\n  const projectChoice = answers['project-choice'];\r\n  const projectName = answers['project-name'];\r\n  const templatePath = `${__dirname}/templates/${projectChoice}`;\r\n\r\n  fs.mkdirSync(`${CURR_DIR}/${projectName}`);\r\n\r\n  createDirectoryContents(templatePath, projectName);\r\n});\r\n"],"names":["CURR_DIR","process","cwd","createDirectoryContents","templatePath","newProjectPath","fs","readdirSync","forEach","file","origFilePath","stats","statSync","isFile","readFileSync","writeFileSync","contents","isDirectory","mkdirSync","__dirname","dirname","fileURLToPath","import","meta","url","CHOICES","inquirer","prompt","name","type","message","choices","validate","input","test","then","answers","projectName","projectChoice"],"mappings":";gHACA,IAAMA,EAAWC,QAAQC,MAEIC,EAAG,SAA1BA,EAA2BC,EAAcC,GACvBC,EAAGC,YAAYH,GAEvBI,QAAQ,SAACC,GACrB,IAAkBC,EAAMN,EAAN,IAAsBK,EAG7BE,EAAGL,EAAGM,SAASF,GAE1B,GAAIC,EAAME,SAAU,CAClB,MAAiBP,EAAGQ,aAAaJ,EAAc,QAGlC,eAATD,IAAuBA,EAAO,cAGlCH,EAAGS,cADkBf,EAAN,IAAkBK,EAAlB,IAAoCI,EACvBO,EAAU,aAC7BL,EAAMM,gBACfX,EAAGY,UAAalB,EAAhB,IAA4BK,EAAkBI,IAAAA,GAG9CN,EAA2BC,EAAgBK,IAAAA,EAAWJ,EAA/B,IAAiDI,OCjBxET,EAAWC,QAAQC,MACnBiB,EAAYC,EAAQC,EAAcC,OAAOC,KAAKC,MAE9CC,EAAUnB,EAAGC,YAAeY,gBAoBlCO,EAASC,OAlBS,CAChB,CACEC,KAAM,iBACNC,KAAM,OACNC,QAAS,oDACTC,QAASN,GAEX,CACEG,KAAM,eACNC,KAAM,QACNC,QAAS,gBACTE,SAAU,SAAUC,GAClB,QAAI,uBAAuBC,KAAKD,IACpB,8EAKSE,KAAK,SAACC,GAC/B,IACiBC,EAAGD,EAAQ,gBACVhC,EAAMe,EAAuBmB,cAFzBF,EAAQ,kBAI9B9B,EAAGY,UAAalB,EAAYqC,IAAAA,GAE5BlC,EAAwBC,EAAciC"}