{"version":3,"file":"index.modern.js","sources":["createDirectoryContents.js","index.js"],"sourcesContent":["import * as fs from 'fs';\r\nconst CURR_DIR = process.cwd();\r\n\r\nconst createDirectoryContents = (templatePath, newProjectPath) => {\r\n  const filesToCreate = fs.readdirSync(templatePath);\r\n\r\n  filesToCreate.forEach((file) => {\r\n    const origFilePath = `${templatePath}/${file}`;\r\n\r\n    // get stats about the current file\r\n    const stats = fs.statSync(origFilePath);\r\n\r\n    if (stats.isFile()) {\r\n      const contents = fs.readFileSync(origFilePath, 'utf8');\r\n\r\n      // Rename\r\n      if (file === '.npmignore') file = '.gitignore';\r\n\r\n      const writePath = `${CURR_DIR}/${newProjectPath}/${file}`;\r\n      fs.writeFileSync(writePath, contents, 'utf8');\r\n    } else if (stats.isDirectory()) {\r\n      fs.mkdirSync(`${CURR_DIR}/${newProjectPath}/${file}`);\r\n\r\n      // recursive call\r\n      createDirectoryContents(`${templatePath}/${file}`, `${newProjectPath}/${file}`);\r\n    }\r\n  });\r\n};\r\n\r\nexport default createDirectoryContents;\r\n","#!/usr/bin/env node\n\r\nimport inquirer from 'inquirer';\r\nimport * as fs from 'fs';\r\nimport { dirname } from 'path';\r\nimport { fileURLToPath } from 'url';\r\nimport createDirectoryContents from './createDirectoryContents.js';\r\nconst CURR_DIR = process.cwd();\r\nconst __dirname = dirname(fileURLToPath(import.meta.url));\r\n\r\nconst CHOICES = fs.readdirSync(`${__dirname}/templates`);\r\n\r\nconst QUESTIONS = [\r\n  {\r\n    name: 'project-choice',\r\n    type: 'list',\r\n    message: 'What project template would you like to generate?',\r\n    choices: CHOICES\r\n  },\r\n  {\r\n    name: 'project-name',\r\n    type: 'input',\r\n    message: 'Project name:',\r\n    validate: function (input) {\r\n      if (/^([A-Za-z\\-\\\\_\\d])+$/.test(input)) return true;\r\n      else return 'Project name may only include letters, numbers, underscores and hashes.';\r\n    }\r\n  }\r\n];\r\n\r\ninquirer.prompt(QUESTIONS).then((answers) => {\r\n  const projectChoice = answers['project-choice'];\r\n  const projectName = answers['project-name'];\r\n  const templatePath = `${__dirname}/templates/${projectChoice}`;\r\n\r\n  fs.mkdirSync(`${CURR_DIR}/${projectName}`);\r\n\r\n  createDirectoryContents(templatePath, projectName);\r\n});\r\n"],"names":["CURR_DIR","process","cwd","templatePath","newProjectPath","fs","readdirSync","forEach","file","origFilePath","stats","statSync","isFile","readFileSync","writeFileSync","contents","isDirectory","mkdirSync","createDirectoryContents","dirname","fileURLToPath","import","meta","url","CHOICES","__dirname","inquirer","prompt","name","type","message","choices","validate","input","test","then","answers","projectName"],"mappings":";gHACA,MAAMA,EAAWC,QAAQC,QAEO,CAACC,EAAcC,KACvBC,EAAGC,YAAYH,GAEvBI,QAASC,IACrB,MAAkBC,EAAI,GAAEN,KAAgBK,IAGlCE,EAAQL,EAAGM,SAASF,GAE1B,GAAIC,EAAME,SAAU,CAClB,QAAiBP,EAAGQ,aAAaJ,EAAc,QAGlC,eAATD,IAAuBA,EAAO,cAGlCH,EAAGS,cADgB,GAAEd,KAAYI,KAAkBI,IACvBO,EAAU,aAC7BL,EAAMM,gBACfX,EAAGY,UAAW,GAAEjB,KAAYI,KAAkBI,KAG9CU,EAAyB,GAAEf,KAAgBK,IAAS,GAAEJ,KAAkBI,WCjB7DP,QAAQC,QACPiB,EAAQC,EAAcC,OAAOC,KAAKC,MAEvCC,EAAGnB,EAAGC,YAAa,GAAEmB,eAoBlCC,EAASC,OAlBS,CAChB,CACEC,KAAM,iBACNC,KAAM,OACNC,QAAS,oDACTC,QAASP,GAEX,CACEI,KAAM,eACNC,KAAM,QACNC,QAAS,gBACTE,SAAU,SAAUC,GAClB,QAAI,uBAAuBC,KAAKD,IACpB,8EAKSE,KAAMC,IAC/B,MACMC,EAAcD,EAAQ,gBACtBjC,EAAgB,GAAEsB,eAFFW,EAAQ,oBAI9B/B,EAAGY,UAAW,GAAEjB,KAAYqC,KAE5BnB,EAAwBf,EAAckC"}